{"ast":null,"code":"import { useMemo } from \"react\";\nimport { ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\";\nimport merge from \"deepmerge\";\nimport isEqual from \"lodash/isEqual\";\nexport const APOLLO_STATE_PROP_NAME = \"__APOLLO_STATE__\";\nlet apolloClient;\n\nfunction createApolloClient() {\n  return new ApolloClient({\n    ssrMode: true,\n    link: new HttpLink({\n      uri: \"http://localhost:3000/api/graphql\",\n      // Server URL (must be absolute)\n      credentials: \"include\" // Additional fetch() options like `credentials` or `headers`\n\n    }),\n    cache: new InMemoryCache({\n      typePolicies: {\n        Query: {\n          fields: {//something to add here\n          }\n        }\n      }\n    })\n  });\n}\n\nexport function initializeApollo(initialState = null) {\n  var _apolloClient2;\n\n  const _apolloClient = (_apolloClient2 = apolloClient) !== null && _apolloClient2 !== void 0 ? _apolloClient2 : createApolloClient(); // If your page has Next.js data fetching methods that use Apollo Client, the initial state\n  // gets hydrated here\n\n\n  if (initialState) {\n    // Get existing cache, loaded during client side data fetching\n    const existingCache = _apolloClient.extract(); // Merge the existing cache into data passed from getStaticProps/getServerSideProps\n\n\n    const data = merge(initialState, existingCache, {\n      // combine arrays using object equality (like in sets)\n      arrayMerge: (destinationArray, sourceArray) => [...sourceArray, ...destinationArray.filter(d => sourceArray.every(s => !isEqual(d, s)))]\n    }); // Restore the cache with the merged data\n\n    _apolloClient.cache.restore(data);\n  } // For SSG and SSR always create a new Apollo Client\n\n\n  if (true) return _apolloClient; // Create the Apollo Client once in the client\n\n  if (!apolloClient) apolloClient = _apolloClient;\n  return _apolloClient;\n}\nexport function addApolloState(client, pageProps) {\n  if (pageProps === null || pageProps === void 0 ? void 0 : pageProps.props) {\n    pageProps.props[APOLLO_STATE_PROP_NAME] = client.cache.extract();\n  }\n\n  return pageProps;\n}\nexport function useApollo(pageProps) {\n  const state = pageProps[APOLLO_STATE_PROP_NAME];\n  const store = useMemo(() => initializeApollo(state), [state]);\n  return store;\n}","map":{"version":3,"sources":["D:/Work/coding/testing/wesbosKeystone1/frontend/lib/apolloClient.js"],"names":["useMemo","ApolloClient","HttpLink","InMemoryCache","merge","isEqual","APOLLO_STATE_PROP_NAME","apolloClient","createApolloClient","ssrMode","link","uri","credentials","cache","typePolicies","Query","fields","initializeApollo","initialState","_apolloClient","existingCache","extract","data","arrayMerge","destinationArray","sourceArray","filter","d","every","s","restore","addApolloState","client","pageProps","props","useApollo","state","store"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,aAAjC,QAAsD,gBAAtD;AACA,OAAOC,KAAP,MAAkB,WAAlB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAO,MAAMC,sBAAsB,GAAG,kBAA/B;AAEP,IAAIC,YAAJ;;AAEA,SAASC,kBAAT,GAA8B;AAC5B,SAAO,IAAIP,YAAJ,CAAiB;AACtBQ,IAAAA,OAAO,MADe;AAEtBC,IAAAA,IAAI,EAAE,IAAIR,QAAJ,CAAa;AACjBS,MAAAA,GAAG,EAAE,mCADY;AACyB;AAC1CC,MAAAA,WAAW,EAAE,SAFI,CAEO;;AAFP,KAAb,CAFgB;AAMtBC,IAAAA,KAAK,EAAE,IAAIV,aAAJ,CAAkB;AACvBW,MAAAA,YAAY,EAAE;AACZC,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE,CACN;AADM;AADH;AADK;AADS,KAAlB;AANe,GAAjB,CAAP;AAgBD;;AAED,OAAO,SAASC,gBAAT,CAA0BC,YAAY,GAAG,IAAzC,EAA+C;AAAA;;AACpD,QAAMC,aAAa,qBAAGZ,YAAH,2DAAmBC,kBAAkB,EAAxD,CADoD,CAGpD;AACA;;;AACA,MAAIU,YAAJ,EAAkB;AAChB;AACA,UAAME,aAAa,GAAGD,aAAa,CAACE,OAAd,EAAtB,CAFgB,CAIhB;;;AACA,UAAMC,IAAI,GAAGlB,KAAK,CAACc,YAAD,EAAeE,aAAf,EAA8B;AAC9C;AACAG,MAAAA,UAAU,EAAE,CAACC,gBAAD,EAAmBC,WAAnB,KAAmC,CAC7C,GAAGA,WAD0C,EAE7C,GAAGD,gBAAgB,CAACE,MAAjB,CAAyBC,CAAD,IACzBF,WAAW,CAACG,KAAZ,CAAmBC,CAAD,IAAO,CAACxB,OAAO,CAACsB,CAAD,EAAIE,CAAJ,CAAjC,CADC,CAF0C;AAFD,KAA9B,CAAlB,CALgB,CAehB;;AACAV,IAAAA,aAAa,CAACN,KAAd,CAAoBiB,OAApB,CAA4BR,IAA5B;AACD,GAtBmD,CAuBpD;;;AACA,YAAmC,OAAOH,aAAP,CAxBiB,CAyBpD;;AACA,MAAI,CAACZ,YAAL,EAAmBA,YAAY,GAAGY,aAAf;AAEnB,SAAOA,aAAP;AACD;AAED,OAAO,SAASY,cAAT,CAAwBC,MAAxB,EAAgCC,SAAhC,EAA2C;AAChD,MAAIA,SAAJ,aAAIA,SAAJ,uBAAIA,SAAS,CAAEC,KAAf,EAAsB;AACpBD,IAAAA,SAAS,CAACC,KAAV,CAAgB5B,sBAAhB,IAA0C0B,MAAM,CAACnB,KAAP,CAAaQ,OAAb,EAA1C;AACD;;AAED,SAAOY,SAAP;AACD;AAED,OAAO,SAASE,SAAT,CAAmBF,SAAnB,EAA8B;AACnC,QAAMG,KAAK,GAAGH,SAAS,CAAC3B,sBAAD,CAAvB;AACA,QAAM+B,KAAK,GAAGrC,OAAO,CAAC,MAAMiB,gBAAgB,CAACmB,KAAD,CAAvB,EAAgC,CAACA,KAAD,CAAhC,CAArB;AACA,SAAOC,KAAP;AACD","sourcesContent":["import { useMemo } from \"react\";\r\nimport { ApolloClient, HttpLink, InMemoryCache } from \"@apollo/client\";\r\nimport merge from \"deepmerge\";\r\nimport isEqual from \"lodash/isEqual\";\r\n\r\nexport const APOLLO_STATE_PROP_NAME = \"__APOLLO_STATE__\";\r\n\r\nlet apolloClient;\r\n\r\nfunction createApolloClient() {\r\n  return new ApolloClient({\r\n    ssrMode: typeof window === \"undefined\",\r\n    link: new HttpLink({\r\n      uri: \"http://localhost:3000/api/graphql\", // Server URL (must be absolute)\r\n      credentials: \"include\", // Additional fetch() options like `credentials` or `headers`\r\n    }),\r\n    cache: new InMemoryCache({\r\n      typePolicies: {\r\n        Query: {\r\n          fields: {\r\n            //something to add here\r\n          },\r\n        },\r\n      },\r\n    }),\r\n  });\r\n}\r\n\r\nexport function initializeApollo(initialState = null) {\r\n  const _apolloClient = apolloClient ?? createApolloClient();\r\n\r\n  // If your page has Next.js data fetching methods that use Apollo Client, the initial state\r\n  // gets hydrated here\r\n  if (initialState) {\r\n    // Get existing cache, loaded during client side data fetching\r\n    const existingCache = _apolloClient.extract();\r\n\r\n    // Merge the existing cache into data passed from getStaticProps/getServerSideProps\r\n    const data = merge(initialState, existingCache, {\r\n      // combine arrays using object equality (like in sets)\r\n      arrayMerge: (destinationArray, sourceArray) => [\r\n        ...sourceArray,\r\n        ...destinationArray.filter((d) =>\r\n          sourceArray.every((s) => !isEqual(d, s))\r\n        ),\r\n      ],\r\n    });\r\n\r\n    // Restore the cache with the merged data\r\n    _apolloClient.cache.restore(data);\r\n  }\r\n  // For SSG and SSR always create a new Apollo Client\r\n  if (typeof window === \"undefined\") return _apolloClient;\r\n  // Create the Apollo Client once in the client\r\n  if (!apolloClient) apolloClient = _apolloClient;\r\n\r\n  return _apolloClient;\r\n}\r\n\r\nexport function addApolloState(client, pageProps) {\r\n  if (pageProps?.props) {\r\n    pageProps.props[APOLLO_STATE_PROP_NAME] = client.cache.extract();\r\n  }\r\n\r\n  return pageProps;\r\n}\r\n\r\nexport function useApollo(pageProps) {\r\n  const state = pageProps[APOLLO_STATE_PROP_NAME];\r\n  const store = useMemo(() => initializeApollo(state), [state]);\r\n  return store;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}